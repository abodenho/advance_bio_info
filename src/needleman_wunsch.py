from itertools import combinations
import numpy as np
import sys

""" Similarity matrix
    A   G   C   T
A    1  -1  -1  -1
G   -1   1  -1  -1
C   -1  -1   1  -1
T   -1  -1  -1   1
"""

score = {'match': 2, 'mismatch': -1, 'gap':-2, 'extend':-1}

def _generator(string):
    for s in string:
        yield s

def _aligned_score(aligned_char, char):
    return sum([score['match'] if c==char else score['mismatch'] for c in aligned_char])


def _compute_matrix(aligned_seqs, new_seq):
    # Init score matrix (cumulative gap penality for first row and column, else 0)
    matrix = [[(a+b)*score['extend'] if a==0 or b==0 else 0 for b in range(1+len(new_seq))] for a in range(1+len(aligned_seqs[0]))]
    # Init direction matrix to keep track of the best direction
    directions = [[(0,0) for b in range(1+len(new_seq))] for a in range(1+len(aligned_seqs[0]))]

    # Fill the matrices
    for i, aligned_char in enumerate(zip(*aligned_seqs)):
        for j, char in enumerate(new_seq):
            # (-1,-1) = TOP_LEFT
            from_top_left = matrix[i][j] + _aligned_score(aligned_char, char)
            # (0,-1) = TOP
            from_top =  matrix[i][j+1] + (score['extend'] if directions[i][j+1]==(0,-1) else score['gap'])
            # (-1,0) = LEFT
            from_left = matrix[i+1][j] + (score['extend'] if directions[i+1][j]==(-1,0) else score['gap'])

            if from_top_left >= from_top and from_top_left >= from_left:
                matrix[i+1][j+1] = from_top_left
                directions[i+1][j+1] = (-1,-1)
            elif from_top >= from_top_left and from_top >= from_left:
                matrix[i+1][j+1] = from_top
                directions[i+1][j+1] = (0,-1)
            elif from_left >= from_top_left and from_left >= from_top:
                matrix[i+1][j+1] = from_left
                directions[i+1][j+1] = (-1,0)
            else:
                print("ERROR")
                sys.exit()
            # s = [ # Order is important... top-left (matching) first !
            #     ((-1,-1), matrix[i][j] + _aligned_score(aligned_char, char)), # from top-left
            #     ((0,-1), matrix[i][j+1] + (score['gap'] if directions[i][j+1])), # from top
            #     ((-1,0), matrix[i+1][j] + (score['gap'])), # from left
            #     ]
            # best = max(s, key=lambda x: x[1])
            # matrix[i+1][j+1] = best[1]
            # directions[i+1][j+1] = best[0]

    return directions

def _find_path(aligned_seqs, new_seq):
    directions = _compute_matrix(aligned_seqs, new_seq)
    i = len(directions[0])-1
    j = len(directions)-1
    path = []
    while i!=0 and j!=0:
        dir = directions[j][i]
        path.append(dir)
        i += dir[0]
        j += dir[1]
    path.reverse()
    return path

def compute_score(seqs): # TODO optimize with memoisation
    rep = 0
    score2 = {'match': 2, 'mismatch': -1, 'gap':-2}
    for seq_A, seq_B in combinations(seqs, 2):
        for a, b in zip(seq_A, seq_B):
            if a==b:
                rep += score2['match']
            elif a=='-' or b=='-':
                rep += score2['gap']
            else:
                rep += score2['mismatch']
    return rep

def needleman_wunsch(profile, seq):
    # Compatibility 2-sequences and n-sequences
    if isinstance(profile, str):
        profile = [profile]
    # Compute Path
    path = _find_path(profile, seq)

    # Align profile
    MSA = []
    for sequence in profile:
        gen = _generator(sequence)
        MSA.append(''.join([next(gen) if node[1] else '-' for node in path]))
    # Align new sequence
    seq = _generator(seq)
    MSA.append(''.join([next(seq) if node[0] else '-' for node in path]))

    return MSA


if __name__ == "__main__":
    if len(sys.argv) == 1:
        sys.exit()
    elif len(sys.argv) >= 3:
        needleman_wunsch(sys.argv)
    elif sys.argv[1] == "test":
        MSA = needleman_wunsch("ACGTGT", "ACT")
        for s in MSA:
            print(len(s), s)
    elif sys.argv[1] == "1":
        seqs = {0:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTCACCACACTATAAAGTGTTCCTCGCTAAGCTCATA',
         1:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTATGCTTTCTATGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTCGCCACACTATAAAGTGTTCCTCGCTAAGCTCATA', 5:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTCACCACACTATAAAGTGTTCCTCGCTAAACTCATA',
         3:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTCACCACACTATAAAGTGTTCCTCGCTAAACTCATA',
         6:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTCACCACACTATAAAGTGTTCCTCGCTAAGCTCATA',
         2:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTCACCACACTATAAAGTGTTCCTCGCTAAGCTCATA',
         4:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTCACCACACTATAAAGTGTTCCTCGCTAAGCTCATA',
         7:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCCTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTTTGATACTCTTGACCTTGTCACCGCACTATAAAGTGTTCCTCGCTAAGCTCATA',
         8:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCGTACGCCATGGACCGGGAGGTGGCTGCATCGTGCGGAGGCGCGGTCCTTGTGGGTCTGATACTCTTGACCTTGTTACCGCACTATAAAGTGTTCCTCGCCAAGCTCATA',
         9:'GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCATACGCCATGGACCGGGAGATGGCTGCATCGTGCGGAGGCGCGGTCCTTATCGGTCTGATACTCTTGACCTTGTCTCCACACTATAAAGTGTTCCTCGCTAAGCTCATA'}
        # 0 = 1 = 2 =3
        # 5 = 6
        MSA = [seqs[0]]
        for i in range(1,10):
            MSA = needleman_wunsch(MSA, seqs[i])
        for s in MSA:
            print(len(s), s)

    elif sys.argv[1] == "2":
        _1 = 'ATGGCGGTCATGGCGCCCCGAACCCTCCTCCTGGTGCTCTCAGGGGTCCTGGCCCTGACCCAGACATGGGCGGGCTCCCACTCCATGAGGTATTTCTACACCTCCATGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCTTCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGCCAGAGGATGGAGCCGCGGGCGCCGTGGGTGGAGCAGGAGGGGCCGGAGTATTGGGACCGGGAGACACAGAACATGAAGGCCCAGACACAGAATGCCCCAGTGAACCTGCGGAACCTGCGCGGCTACTACAACCAGAGCGAGGCGGGGTCTCACACCCTCCAGACGATGCACGGCTGCGACCTGGGACCCGACGGGCGCCTCCTCCGCGGGTATTACCAGTCCGCCTACGACGGCAAGGATTACTTCGCCCTGAACGAGGACCTGCGCTCCTGGACCGCCGCGGACTTGGCGGCTCAGAACACCCAGCGGAAGTGGGAGGCGGCGGATGTGGCGGAGCAGATTAGAGCCTACCTGGAGGGCCGGTGTGTGGAGTGGCTCCGCAGATACCTGGAGAACGGGAAGGAGACGCTGCAGCGCGCGGACCCCCCCAAGACACATGTGACCCACCACCCCGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCGTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAAACTCAGGACACGGAGCTCATGGAGACCAGGCCTGCAGGAGATGGAACCTTCCAGAAGTGGGCAGCTGTGGTGGTGCCTTCTGGAAAGGAGCAGAGATACACCTGTCATGTGCAGCATGAGGGTCTGCCCAAGCCCCTCACCTTGAGATGGGAGCCGTCTTCCCAGTCCACCATCCCCATCGTGGGCATCATTGCTGGCCTGGTTCTCCTTGGAGCTATGGTCATTGGAGCTGTGGTTGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGATAGAAAAGGAGGGAGCTACTCTCAGGCTGCAAGCAGTGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGCTTGTAAAGTGTGA'
        _2 = 'ATGGCGGTCATGGCGCCCCGAACCCTCCTCCTGGTGCTCTCAGGGGCCCTGGCCCTGACCCAGACCCGGGCAGGCTCTCACTCCATGAGCTATTTCTACACCTCCATGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCTTCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGCCAGAGGATGGAGCCGCGGGCGCCGTGGGTGGAGCAGGAGGGTCCAGAGTATTGGGACCGGAGCACACGGATCATGAAGACCGCGACACAGAATGCCCCAGTGGGCCTGCGGAACCTGCGCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACCTACCAGAGTATGTATGGCTGCGACCTGGGGCCCGACGGGCGCCTCCTCCGCGGGTATTACCAGTCCGCCTACGACGGCAGGGATTACATCGCCCTGAACGAGGACCTGCGCTCCTGGACGGCCGCCGACATGGCGGCTCAGAACACCCAGCGGAAGTGGGAGACGGAAGGTGTGGCAGAGCAGCTGAGCGCCTACCTGGAGGGCGAGTGCCTGGAGTGGCTCCGCAGACACCTGGAGAACGGGAAGGAGATGCTGCAGCGCGCGGACCCCCCCAAGACACATGTGACCCACCACCCCGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGAGAGGACCAAACTCAGGACACGGAGCTCGTGGAGACCAGGCCCGCAGGGGATGGAACCTTCCAGAAGTGGGCAGCTGTGGTGGTGCCTTCTGGAAAGGAGCAGAGATACACCTGTCATGTGCAGCATGAGGGTCTGCGTGAGCCCCTCACCCTGAGATGGGAGCCATCTTCCCAGTCCACCATCCCCATCGTGGGCATCATTGCTGGCGTGGTTCTCCTTGGAATTGTGGTCACTGGAGCTGTGATTGCTGCTGTGATATGGAGGAGGAAGAGCTCAGATGGAAAAGGAGGGAGCTACTCTCAGGCTGCAAGCAGTGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGCTTGTAAAGTGTGA'
        _3 = 'ATGGCGGTCATGGCGCCCCGAACCCTCCTCCTGCTGCTCTCAGGGGCCCTGGCCCTGACCCAGACCTGGGCGAGCTCCCACTCCATGAGGTATTTCTACACCTCCGTGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCCTGCGGTTCGACAGCGACGCCGCGAGCCAGAGGCTGGAGCCGCGGGCGCGGTGGGTGGAGCAGGAGGGGCCGGAGTATTGGGACCGGAACACACGGATCGTGAAGGCCGAGACACAGAATGCCCCAGTGAACCTGCAGAACCTGCGCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACCATCCAGAGGATGTACGGCTGCGACCTGGGGCCCGACGGGCGCCTCCTCCGCGGGTATGAACAGTACGCCTACGACGGCAGGGATTACATCGCCCTGAACGAGGACCTGCGCTCCTGGACCGCCGCGGACATGGCGGCTCAGAACACCCAGCGCAAGTGGGAGGCGGCCCGTGCGGCGGAGCAGCACAGAACCTACCTGGAGGGCGAGTGCCTGGAGTGGCTCCGCAGACACCTGGAGAACGGGAAGGAGACGCTGCAGCGCGCGGACCCCCCCAAGACACATGTGACCCACCACCCCGTCTCTGACTACGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGAGAGGACCAAACTCAGGACACGGAGCTCGTGGAGACCAGGCCTGCAGGAGATGGAACCTTCCAGAAGTGGGCGGCTGTGGTGGTGCCTTCTGGAAAGGAGCAGAGATACACCTGTCATGTGCAGCATGAGGGTCTGCCCAAGCCCCTCACCTTGAGATGGGAGCCGTCTTCCCAGTCCACCATCGTGGGCATCATTGCTGGCCTGGTTCTCCTTGGAGCTGTGGTCACTGGAGCTGTGGTTGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGATAGAAAAGGAGGAAGCTACTCTCAGGCTGCAAGCAGTGACAGTGCCCAGGGATCTGATGTGTCTCTCACGGCTTGTAAAGTGTGA'
        _4 = 'ATGCGGGTCATGGCGGTCCGAACCCTCCTCCTGCTGCTCTCGGGGGCCCTGGCCCTGACCGAGACCTGGGCCGGCTCCCACTCCATGAGGTATTTCACCACCGCCCTGTCCCGGCCCGGCCGCTGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGTCCGAGGATGGAGCCGCGGGCGCGGTGGATAGAGCAGGAGGGGCCGGAGTATTGGGAGGAGCAGACACGGAGAGCCAAGGGCCACGCACAGACTGACCTAGGGAGCCTGAGGATCCTGCGCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACCTACCAGTGGATGGCTGGCTGCGACGTGGGACCCGACGGGCGCCTCCTCCGCGGGTATCACCAGCGCGCCTACGACGGCAAGGATTACATCGCCCTGAACGAGGACCTGCGCTCCTGGACCGCCGCGGACGTGGCGGCTCAGAAAACTCAGCGCAAGTGGGAGGCGGCCCGTTTGGCAGAGCAGTGGAGAGCCTACCTGGAGGGCGAGTGCGTGGAGTGGCTCCGCAGATACCTGGAGAACGGGAAGGAGATGCTGCAGCGGACGGACCCCCCAAAGACACACGTGACCCACCACCCCGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCTCACTGACCTGGCAGCGGGATGGGGAGGACCAAACTCAGGACACTGAGCTTGTGGAGACCAGGCCAGGAGGAGATGGAACCTTCCAGAAGTGGGGAGCTGTGGTGGTGCCTTCTGGAGAAGAGCAGAGATACACGTGCCATGTGCAGCACGAGGGATTGCCGGAGCCCCTCACCCTGAGATGGGAGCCATCTTCCCAGTCCACCATCCCCATCGTGGGCATCGTTGCTGGCCTGGCTGTCCTAGCAGTTGTGGTCATCGGAGCTGTGGTCGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGGTGGAAAAGGAGGGAGCTACTCTCAGGCTGCGTCCAGCGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGCTTGA'
        _5 = 'ATGCGGTCATGGCTCCCCGAACCCTCCTCCTGCTGCTCTCGGGGGCCCTGGCCCTGACCGAGACCTGGGCCGGCTCGCACTCCATGAAGTATTTCTACACCGCCGTGTCCCGGCCCGGCCGCTGGGAGCCCCACTTCATCTCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGAGAGTCCGAGAAAGGAGCCGCGGGCGCCGTGGGCGGAGCAGGAGGGACCGGAGTATTGGGAAGAGCAGACACGGAGAGCCAAGGCCAACGCACAGGCTGACCGAATGTGCCTGCGGACCGTGCCCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACCTTCCAGAGTATGTATGGCTGCGACCTGGGGCCCGACTGGCGCCTCCTCCGCGGGTATTACCAGTCCGCCTACGACGGCAGGGATTACATCGCCCTGAACGAGGACCTGCTCTCCTGGACCTCCGCGGACGTGGCGGCTCAGAACACCCAGCGCGAGTGGGAGGCGGACCGTTATGCGGAGCAGCTGAGAGCCTACCTGGAGGGCGAGTGCGTGGAGTCGCTCCGCAGATACCTGGAGAACGGGAAGGAGACGCTGCAGCGCGCGGACCCCCCAAAGACACACGTGACCCACCACCCCATCTCTAACCATGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAAACTCAGGACACAGAGCTTGTGGAGACCAGGCCAGCAGGAGATGGAACCTTCCAGAAGTGGGGAGCTGTGGTGGTGCCTTCTGGAGAAGAGCAGAGATACACGTGCCATGTGCAGCACGAGGGATTGCCAGAGCCCCTCACCCTCAGATGGGAACCATCTTCCCAGTCCACCATCCCCATCGTGGGCATTGTTGCTGGCCTGGCTGTTGTAGCAGTTGTGGTCACCGGAGCTGTGGTCGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGGTGCAAAAGGAGGGAGCTACTCTCAGGCTGCGTCCAACGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGCTTGA'

        MSA = needleman_wunsch(_1, _3)
        MSA = needleman_wunsch(MSA, _2)
        MSA = needleman_wunsch(MSA, _5)
        MSA = needleman_wunsch(MSA, _4)
        for s in MSA:
            print(len(s), s)
        print(sum([1 for a,b,c,d,e in zip(*MSA) if a==b and b==c and c==d and d==e]))
        print("SCORE", compute_score(MSA))

    elif sys.argv[1] == "4":
        Lemur="ATGACTTTGCTGAGTGCTGAGGAGAATGCTCATGTCACCTCTCTGTGGGGCAAGGTGGATGTAGAGAAAGTTGGTGGCGAGGCCTTGGGCAG"
        Gorilla="ATGGTGCACCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGG"
        Mouse="ATGGTTGCACCTGACTGATGCTGAGAAGTCTGCTGTCTCTTGCCTGTGGGCAAAGGTGAACCCCGATGAAGTTGGTGGTGAGGCCCTGGGCAGG"

        MSA = needleman_wunsch(Lemur, Gorilla)
        MSA = needleman_wunsch(MSA, Mouse)
        print(len(MSA[0]), MSA[0])
        print(len(MSA[1]), MSA[1])
        print(len(MSA[-1]), MSA[-1])
        print(sum([1 for a,b,c in zip(*MSA) if a==b and b==c]))
        print("SCORE", compute_score(MSA))
        print("MSA", MSA)


#######
## 4 ##
#######
# 96 ATGA-CTTTGCTGAGTGCTGAGGAGAATGCTCATGTCAC-CTCTCTGTGGGGC-AAGGTGGATGTAGAGAAAGTTGGTGGCGAGGCCTTGGGCA-G
# 96 ATGG-TGCACCTGACTCCTGAGGAGAAGTCTGCCGTTAC-TGCCCTGTGGGGC-AAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGG
# 96 ATGGTTGCACCTGACTGATGCTGAGAAGTCTGCTGTCTCTTGC-CTGT-GGGCAAAGGTGAACCCCGATGAAGTTGGTGGTGAGGCCCTGGGCAGG
# 61
# SCORE 348
# MSA ['ATGA-CTTTGCTGAGTGCTGAGGAGAATGCTCATGTCAC-CTCTCTGTGGGGC-AAGGTGGATGTAGAGAAAGTTGGTGGCGAGGCCTTGGGCA-G', 'ATGG-TGCACCTGACTCCTGAGGAGAAGTCTGCCGTTAC-TGCCCTGTGGGGC-AAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGG', 'ATGGTTGCACCTGACTGATGCTGAGAAGTCTGCTGTCTCTTGC-CTGT-GGGCAAAGGTGAACCCCGATGAAGTTGGTGGTGAGGCCCTGGGCAGG']


#######
## 2 ##
#######
# 1133 ATGGC-GGTCATGGCGCCCCGAACCCTCCTCCTGGTGCTCTCAGGGGTCCTGGCCCTGACCCAGACATGGGC-GGGCTCCCACTCCATG-AGGTATTTCTA-CACCTCCATGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCTTCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAG-CCAGAGGATGGAGCCGCGGGCGCCGTGGGTGGAGCAGGAGGGGCCGGAGTATTGGGACCG-GGA-GACACAGAACATG--AA-GGCCCA-GACACAGAATG-CCCCA-GTGAACCTGCGGAA-CC-TGCGCGGCTACTACAACCAGAGCGAGGCGGGGTCTCACACCCT-CCAGACG-AT-GCACGGCTGCGACCTGGGACCCGACGGGCGCCTCCTCCGCGGGTATTACCAGTC-CGCCTACGACGGCAAGGATTACTTCGCCCTGAACGAGGACCTGCGCTCCTGGACCGCCGCGGACTTGGCGGCTCAGAACACCCAGCG-GAAGTGGGAGGCGGCGGATGT-GGCGGAGCAGAT-TAGAGCCTACCTGGAGGGCCGGTGTGTGGAGTGGCTCCGCAGATACCTGGAGAACGGGAAGGAGACGCTGCAGCGCG-CGGACCCCCCCAAGACACATGTGACCCACCACCCCGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCGTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAAACTCAGGACACGGAGCTCATGGAGACCAGGCCTGCAGGAGATGGAACCTTCCAGAAGTGGGCAGCTGTGGTGGTGCCTTCTGGA-AAGGAGCAGAGATACACCTGTCATGTGCAGCATGAGGG-TCTGCCCA-AGCCCCTCACCTTGAGATGGGAGCCGTCTTCCCAGTCCACCATCCCCATCGTGGGCATCATTGCTGGCCTGGTTC--TCCTTG--G-AGCTATGGTCA-TTGGAGCTGTGGTTGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGATAG-AAAAGGAGGGAGCTACTCTCAGGCTGCAAG--CAGTGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGCTTGTAAAGTGTGA
# 1133 ATGGC-GGTCATGGCGCCCCGAACCCTCCTCCTGCTGCTCTCAGGGGCCCTGGCCCTGACCCAGACCTGGGC-GAGCTCCCACTCCATG-AGGTATTTCTA-CACCTCCGTGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCCTGCGGTTCGACAGCGACGCCGCGAG-CCAGAGGCTGGAGCCGCGGGCGCGGTGGGTGGAGCAGGAGGGGCCGGAGTATTGGGACCG-GAA-CACACGGATCGTG--AA-GGCCGA-GACACAGAATG-CCCCA-GTGAACCTGCAGAA-CC-TGCGCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACCAT-CCAGAGG-AT-GTACGGCTGCGACCTGGGGCCCGACGGGCGCCTCCTCCGCGGGTATGAACAGTA-CGCCTACGACGGCAGGGATTACATCGCCCTGAACGAGGACCTGCGCTCCTGGACCGCCGCGGACATGGCGGCTCAGAACACCCAGCG-CAAGTGGGAGGCGGCCCGTGC-GGCGGAGCAGCA-CAGAACCTACCTGGAGGGCGAGTGCCTGGAGTGGCTCCGCAGACACCTGGAGAACGGGAAGGAGACGCTGCAGCGCG-CGGACCCCCCCAAGACACATGTGACCCACCACCCCGTCTCTGACTACGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGAGAGGACCAAACTCAGGACACGGAGCTCGTGGAGACCAGGCCTGCAGGAGATGGAACCTTCCAGAAGTGGGCGGCTGTGGTGGTGCCTTCTGGA-AAGGAGCAGAGATACACCTGTCATGTGCAGCATGAGGG-TCTGCCCA-AGCCCCTCACCTTGAGATGGGAGCCGTCTTCCCAGT---CCA---CCATCGTGGGCATCATTGCTGGCCTGGTTC--TCCTTG--G-AGCTGTGGTCA-CTGGAGCTGTGGTTGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGATAG-AAAAGGAGGAAGCTACTCTCAGGCTGCAAG--CAGTGACAGTGCCCAGGGATCTGATGTGTCTCTCACGGCTTGTAAAGTGTGA
# 1133 ATGGC-GGTCATGGCGCCCCGAACCCTCCTCCTGGTGCTCTCAGGGGCCCTGGCCCTGACCCAGACCCGGGCAG-GCTCTCACTCCATG-AGCTATTTCTA-CACCTCCATGTCCCGGCCCGGCCGCGGGGAGCCCCGCTTCTTCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAG-CCAGAGGATGGAGCCGCGGGCGCCGTGGGTGGAGCAGGAGGGTCCAGAGTATTGGGACCG-G-AGCACACGGATCATG--AA-GACCGC-GACACAGAATG-CCCCA-GTGGGCCTGCGGAA-CC-TGCGCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACC-TACCAGA-GTAT-GTATGGCTGCGACCTGGGGCCCGACGGGCGCCTCCTCCGCGGGTATTACCAGTC-CGCCTACGACGGCAGGGATTACATCGCCCTGAACGAGGACCTGCGCTCCTGGACGGCCGCCGACATGGCGGCTCAGAACACCCAGCG-GAAGTGGGAGACGGAAGGTGT-GGCAGAGCAGCT-GAGCGCCTACCTGGAGGGCGAGTGCCTGGAGTGGCTCCGCAGACACCTGGAGAACGGGAAGGAGATGCTGCAGCGCG-CGGACCCCCCCAAGACACATGTGACCCACCACCCCGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGAGAGGACCAAACTCAGGACACGGAGCTCGTGGAGACCAGGCCCGCAGGGGATGGAACCTTCCAGAAGTGGGCAGCTGTGGTGGTGCCTTCTGGA-AAGGAGCAGAGATACACCTGTCATGTGCAGCATGAGGG-TCTGCGTG-AGCCCCTCACCCTGAGATGGGAGCCATCTTCCCAGTCCACCATCCCCATCGTGGGCATCATTGCTGGCGTGGTTC--TCCTTG--G-AATTGTGGTCA-CTGGAGCTGTGATTGCTGCTGTGATATGGAGGAGGAAGAGCTCAGATGG-AAAAGGAGGGAGCTACTCTCAGGCTGCAAG--CAGTGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGCTTGTAAAGTGTGA
# 1133 AT-GC-GGTCATGGCTCCCCGAACCCTCCTCCTGCTGCTCTCGGGGGCCCTGGCCCTGACCGAGACCTGGGCCG-GCTCGCACTCCATGAAG-TATTTCTA-CACCGCCGTGTCCCGGCCCGGCCGCTGGGAGCCCCACTTCATCTCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGAGAGTCC-GAGAAAGGAGCCGCGGGCGCCGTGGGCGGAGCAGGAGGGACCGGAGTATTGGGA-AGAGCA-GACACGGA-GA-GCCAA-GGCCAACG-CACAGGCTGACCGAATGTG--CCTGCGG-A-CCGTGCCCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACC-TTCCAGA-GTAT-GTATGGCTGCGACCTGGGGCCCGACTGGCGCCTCCTCCGCGGGTATTACCAGTC-CGCCTACGACGGCAGGGATTACATCGCCCTGAACGAGGACCTGCTCTCCTGGACCTCCGCGGACGTGGCGGCTCAGAACACCCAGCGCG-AGTGGGAGGCGGACCGT-TATGCGGAGCAGCT-GAGAGCCTACCTGGAGGGCGAGTGCGTGGAGTCGCTCCGCAGATACCTGGAGAACGGGAAGGAGACGCTGCAGCGCG-CGGACCCCCCAAAGACACACGTGACCCACCACCCCATCTCTAACCATGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCACACTGACCTGGCAGCGGGATGGGGAGGACCAAACTCAGGACACAGAGCTTGTGGAGACCAGGCCAGCAGGAGATGGAACCTTCCAGAAGTGGGGAGCTGTGGTGGTGCCTTCTGGAGAA-GAGCAGAGATACACGTGCCATGTGCAGCACGAGGGAT-TGC-CAGAGCCCCTCACCCTCAGATGGGAACCATCTTCCCAGTCCACCATCCCCATCGTGGGCATTGTTGCTGGCCTGG--C--T-GTTGTAGCAGTTGTGGTCA-CCGGAGCTGTGGTCGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGGT-GCAAAAGGAGGGAGCTACTCTCAGGCTGC--GTCCAACGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGC--------T-TGA
# 1133 AT-GCGGGTCATGGCGGTCCGAACCCTCCTCCTGCTGCTCTCGGGGGCCCTGGCCCTGACCGAGACCTGGGCCG-GCTCCCACTCCATG-AGGTATTTC-ACCACCGCCCTGTCCCGGCCCGGCCGCTGGGAGCCCCGCTTCATCGCCGTGGGCTACGTGGACGACACGCAGTTCGTGCGGTTCGACAGCGACGCCGCGAGTCC-GAGGATGGAGCCGCGGGCGCGGTGGATAGAGCAGGAGGGGCCGGAGTATTGGGA-GGAGCA-GACACGGA-GA-GCCAAGGGCC-ACG-CACAGACTGACC-TA-GGGAGCCTGAGG-ATCC-TGCGCGGCTACTACAACCAGAGCGAGGCCGGGTCTCACACC-TACCAGTGG-ATGGC-TGGCTGCGACGTGGGACCCGACGGGCGCCTCCTCCGCGGGTATCACCAG-CGCGCCTACGACGGCAAGGATTACATCGCCCTGAACGAGGACCTGCGCTCCTGGACCGCCGCGGACGTGGCGGCTCAGAAAACTCAGCG-CAAGTGGGAGGCGGCCCGT-TTGGCAGAGCAG-TGGAGAGCCTACCTGGAGGGCGAGTGCGTGGAGTGGCTCCGCAGATACCTGGAGAACGGGAAGGAGATGCTGCAGCG-GACGGACCCCCCAAAGACACACGTGACCCACCACCCCGTCTCTGACCATGAGGCCACCCTGAGGTGCTGGGCCCTGGGCTTCTACCCTGCGGAGATCTCACTGACCTGGCAGCGGGATGGGGAGGACCAAACTCAGGACACTGAGCTTGTGGAGACCAGGCCAGGAGGAGATGGAACCTTCCAGAAGTGGGGAGCTGTGGTGGTGCCTTCTGGAGAA-GAGCAGAGATACACGTGCCATGTGCAGCACGAGGGAT-TGC-CGGAGCCCCTCACCCTGAGATGGGAGCCATCTTCCCAGTCCACCATCCCCATCGTGGGCATCGTTGCTGGCCTGG--CTGTCC-T--AGCAGTTGTGGTCATC-GGAGCTGTGGTCGCTGCTGTGATGTGGAGGAGGAAGAGCTCAGGTGG-AAAAGGAGGGAGCTACTCTCAGGCTGC--GTCCAGCGACAGTGCCCAGGGCTCTGATGTGTCTCTCACGGC--------T-TGA
# 926
# SCORE 19016


#######
## 1 ##
#######
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTG-TC-ACC--ACACTATAAAGTGTTCCTCG-CTAAGCTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTATG-CTTTCTATGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGC-GCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTG-TC-GCC--ACACTATAAAGTGTTCCTCG-CTAAGCTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTG-TC-ACC--ACACTATAAAGTGTTCCTCG-CTAAGCTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTG-TC-ACC--ACACTATAAAGTGTTCCTCG-CTAAACTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTG-TC-ACC--ACACTATAAAGTGTTCCTCG-CTAAGCTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTG-TC-ACC--ACACTATAAAGTGTTCCTCG-CTAAACTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTG-TC-ACC--ACACTATAAAGTGTTCCTCG-CTAAGCTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACGCC-TTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGGTT-TGATACTCTTGACCTTG-TC-ACC-G-CACTATAAAGTGTTCCTCG-CTAAGCTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGCG-TACGCCATGGACCGGGAGG-TGGCTGCATCGTGCGGAGGCGCGGTCCTT-GT-GGG-TCTGATACTCTTGACCTTGTT--ACCG--CACTATAAAGTGTTCCTCGCC-AAGCTCATA
# 223 GTGCTGCCTGGTACATCAAGGGCAGGCTGGTCCCTGGGGCGGCGTACG-CTTTCTACGGCGTATGGCCGCTGCTCCTGCTCCTGTTGGCGTTGCCACCACGTGC-ATACGCCATGGACCGGGA-GATGGCTGCATCGTGCGGAGGCGCGGTCCTTA-TC-GG-TCTGATACTCTTGACCTTG-TCT-CC--ACACTATAAAGTGTTCCTCG-CTAAGCTCATA
# 198
# SCORE 19124
